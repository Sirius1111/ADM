@font-face{font-family:Muller;font-weight:400;src:url(../fonts/Muller/MullerRegular.eot?) format("eot"),url(../fonts/Muller/MullerRegular.woff2) format("woff2"),url(../fonts/Muller/MullerRegular.woff) format("woff"),url(../fonts/Muller/MullerRegular.ttf) format("truetype");font-display:swap}@font-face{font-family:Muller;font-weight:500;src:url(../fonts/Muller/MullerMedium.eot?) format("eot"),url(../fonts/Muller/MullerMedium.woff2) format("woff2"),url(../fonts/Muller/MullerMedium.woff) format("woff"),url(../fonts/Muller/MullerMedium.ttf) format("truetype");font-display:swap}@font-face{font-family:Muller;font-weight:700;src:url(../fonts/Muller/MullerBold.eot?) format("eot"),url(../fonts/Muller/MullerBold.woff2) format("woff2"),url(../fonts/Muller/MullerBold.woff) format("woff"),url(../fonts/Muller/MullerBold.ttf) format("truetype");font-display:swap}*,::after,::before{box-sizing:inherit}*{margin:0;padding:0;-webkit-tap-highlight-color:transparent}:active,:focus{-webkit-tap-highlight-color:transparent;outline:0}html{box-sizing:border-box}body{min-width:320px;min-height:100vh;overflow-x:hidden;display:flex;flex-direction:column;justify-content:space-between;background:#000;font-weight:400;font-family:Muller,sans-serif;line-height:1.2;color:#fff}main{flex-grow:1}.wrap{max-width:1006px;margin:0 auto;padding:0 15px;box-sizing:border-box;display:flex;flex-direction:column}.container{max-width:1310px;margin:0 auto;padding:0 15px;box-sizing:border-box;display:flex;flex-direction:column}.btn-primary{transition:all .3s ease;background:#1157ff;border-color:#1157ff;color:#fff;box-shadow:0 7px 10px rgba(255,255,255,.15)}.btn-primary:hover{background:#e60b89;border-color:#e60b89}.btn-hover{transition:all .3s ease}.btn-hover:hover{background:#e60b89;border-color:#e60b89;color:#fff;box-shadow:0 7px 10px rgba(255,255,255,.15)}.header{padding:14px 0;position:relative}.header__row{display:flex;align-items:center}.header__logo{width:100%;max-width:170px;display:flex;align-items:center}.header__logo img{max-width:100%;height:50px}.header__navigation{width:100%;display:flex;justify-content:center}.header__navigation-item{display:inline-block;margin:0 25px;list-style:none}.header__navigation-item:last-child{margin-right:0}.header__navigation-item:first-child{margin-left:0}.header__navigation-item.active a::after{transform:scaleX(1);background:#1157ff}.header__navigation-item.btn{display:none}.header__navigation-item.btn a::after{display:none}.header__navigation-link{text-decoration:none;color:#fff;text-transform:uppercase;font-weight:500;font-size:12px;position:relative;padding-bottom:5px}.header__navigation-link::after{content:'';width:100%;height:2px;background:#fff;transition:transform .2s ease;transform:scaleX(0);position:absolute;bottom:0;left:0}.header__navigation-link:hover::after{transform:scaleX(1)}.header__navigation-link.btn{display:none}.header__call{width:100%;max-width:172px;display:flex;justify-content:flex-end}.header__call-btn{display:inline-block;padding:14px 26px;border:1px solid #fff;border-radius:5px;text-decoration:none;color:#fff;font-weight:500;font-size:15px}@media (max-width:767px){.header__logo{max-width:172px}.header{min-height:60px}.header__navigation-item.btn{display:block;border:2px solid;border-radius:5px}.header__navigation-item.btn a{padding:15px;display:inline-block}.header__navigation-item.btn:active{border-color:#1157ff}.header__navigation-item.btn:active a{background:#1157ff}.header__row{justify-content:space-between}.header__navigation{width:50%}.header__navigation-btn{width:60px;height:60px;position:relative;z-index:10000;cursor:pointer;transition:all .2s ease-in;border:2px solid #fff}.header__navigation-btn span{width:20px;height:5px;background:#1157ff;position:absolute;left:50%;transform:translateX(-50%);transition:all .5s ease}.header__navigation-btn span:first-child{top:21px}.header__navigation-btn span:last-child{bottom:21px}.header__navigation-btn.active span:first-child{top:50%;width:50%;transform:translateX(-50%) translateY(-50%) rotate(45deg)}.header__navigation-btn.active span:last-child{bottom:50%;width:50%;transform:translateX(-50%) translateY(50%) rotate(-225deg)}.header__navigation-container{position:fixed;top:0;left:0;width:100%;height:100vh;background:#000;display:none;align-items:center;flex-direction:column;justify-content:center;z-index:9999}.header__navigation-item{margin:20px 0}.header__navigation-item:last-child{margin-bottom:0}.header__navigation-item:first-child{margin-top:0}.header__navigation-link{font-size:25px}}@media (max-width:480px){.header__call{display:none}.header__navigation{justify-content:flex-end}}.footer{padding:45px 0 56px}.footer__row{display:flex;align-items:flex-start;justify-content:space-between}.footer__item{flex:1 1 100%;display:flex;flex-direction:column;align-items:flex-start}.footer__item-logo{max-width:100%;height:50px}.footer__item-title{font-size:13px;font-weight:700;margin-bottom:14px}.footer__item-link{display:inline-block;text-decoration:none;color:#fff;font-size:13px;margin:0 0 14px;max-width:150px;position:relative;padding-bottom:2px}.footer__item-link:last-child{margin-bottom:0}.footer__item-link:first-child{margin-top:0}.footer__item-link::after{content:'';width:100%;height:2px;background:#fff;transition:transform .2s ease;transform:scaleX(0);position:absolute;bottom:0;left:0}.footer__item-link:hover::after{transform:scaleX(1)}.footer__item-link.call{color:#1157ff}.footer__item-link.call::after{background:#1157ff}.footer__item:last-child{text-align:left;flex-basis:50%}@media (max-width:992px){.footer__item:last-child{flex-basis:80%}}@media (max-width:767px){.footer{padding:20px 0 15px}.footer__row{flex-wrap:wrap}.footer__item{text-align:left;flex-basis:50%;margin-bottom:30px}.footer__item:last-child{flex-basis:50%}}@media (max-width:480px){.footer{background:#101010;padding:35px 0 51px}.footer__item:nth-of-type(1){order:3;margin-bottom:0}.footer__item:nth-of-type(2){order:1}.footer__item:nth-of-type(3){order:2}.footer__item:nth-of-type(4){order:4;margin-bottom:0}.footer__item-logo{width:120px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
