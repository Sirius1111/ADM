.progress{padding:42px 0;background:#0c0b09}.progress.progress-web{background:#101010}.progress.progress-mobile{padding:81px 0}.progress.progress-mobile.first{background:#101010}.progress.progress-mobile.first .progress__item{background:#101010}.progress.progress-mobile.first .progress__item-step{background:#101010}.progress.progress-mobile.second{background:#000}.progress.progress-mobile.second .progress__item{background:#000}.progress.progress-mobile.second .progress__item-step{background:#000}.progress.progress-mobile .progress__item{padding:38px 15px 44px 30px}.progress.progress-mobile .progress__item-li{font-size:14px;position:relative;list-style:none;margin:7px 0}.progress.progress-mobile .progress__item-li:last-child{margin-bottom:0}.progress.progress-mobile .progress__item-li:first-child{margin-top:0}.progress.progress-mobile .progress__item-li::before{background:#fff;content:'';display:inline-block;position:absolute;left:0;top:2px;transform:translateX(-100%);height:8px;width:8px;border-radius:50%;margin-left:-9px}.progress__title{font-size:32px;font-weight:700;margin-bottom:15px}.progress__description{font-size:14px;font-weight:500;margin-bottom:47px;max-width:480px}.progress__container{display:flex}.progress__item{width:100%;position:relative;background:#000;padding:20px 14px 50px;margin:0 8px;box-shadow:0 3px 20px 0 rgba(255,255,255,.11);border:1px solid #272727}.progress__item:last-child{margin-right:0}.progress__item:first-child{margin-left:0}.progress__item::after{content:'';width:100%;height:0;border-top:4px dotted #fff;position:absolute;top:0;left:49%;transform:translate(0,-50%);z-index:1}.progress__item:last-child::after{display:none}.progress__item-icon{margin-bottom:13px}.progress__item-icon img{height:50px}.progress__item-title{font-size:14px;font-weight:700}.progress__item-description{margin-top:5px;font-size:12px;font-weight:500}.progress__item-step{position:absolute;top:0;left:50%;transform:translate(-50%,-50%);background:#000;width:40px;height:40px;display:flex;align-items:center;justify-content:center;border-radius:50%;border-top:1px solid #272727;z-index:2;-webkit-filter:drop-shadow(0 -3px 3px rgba(255, 255, 255, .11));filter:drop-shadow(0 -3px 3px rgba(255, 255, 255, .11))}.progress__btn{margin-top:40px;align-self:center;display:inline-block;padding:16px 26px 14px;border-radius:5px;text-decoration:none;font-size:15px}@media (max-width:992px){.progress__container{flex-wrap:wrap;justify-content:center}.progress__item{width:45%;margin:20px 10px}.progress__item::after{display:none}.progress__item:first-child{margin-left:10px}.progress__item:last-child{margin-right:10px}.progress__title{font-size:28px}}@media (max-width:767px){.progress__container{justify-content:space-between}.progress__item{width:80%;margin:20px auto}.progress__item:last-child{margin-bottom:0}.progress__item:first-child{margin-top:0}.progress__item:first-child{margin-left:auto}.progress__item:last-child{margin-right:auto}.progress__title{font-size:24px}.progress__description{font-size:14px}.progress__btn{font-size:14px}}@media (max-width:480px){.progress{padding:40px 0}.progress.progress-mobile{padding:40px 0}.progress__container{justify-content:center}.progress__item{width:95%}.progress__title{font-size:20px}.progress__description{font-size:13px}.progress__btn{font-size:13px}}@media (max-width:368px){.progress__item{width:100%}.progress__btn{font-size:12px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
